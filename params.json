{"name":"Digital Emulation of a Vacuum Tube Guitar Preamp","tagline":"Final Project for EECS 352 at Northwestern University","body":"### Introduction\r\nVacuum tube guitar amplifiers are niche musical products which generate millions of dollars in annual sales. Vacuum tubes are an otherwise obsolete technology that is still being used in guitar amplifiers today because many electric guitarists prefer the way they distort and respond to playing dynamics compared to transistor amplifiers. The main reason why tubes sound different when they distort is the way they clip the signal, soft clipping the signal waveform instead of abruptly hard clipping (see figure below). \r\n\r\n![figure1](https://raw.githubusercontent.com/ArthurMa/EECS352/master/figure1.jpg)\r\n\r\nDigital modeling amplifiers already exist, but to many electric guitarists, they often fall short of capturing the unique sound of an overdriven tube amplifier. Our goal was to create an algorithm ableto emulate the cascaded soft clipping present in guitar vacuum tube preamps, given a suitable electric guitar signal encoded in an audio format.\r\n\r\n### Design\r\n##### *Individual Gain Stages*\r\nThe algorithm accepts a .MP3 music file of a guitar signal as input. Other music formats supported by MATLAB's audioread function will work as well. The algorithm for each simulated gain stage is based on how a vacuum tube triode gain stage functions as detailed in [1]. It first applies a low pass filter to the input to simulate the low pass filter created by Cf, Rg (see Figure 2), and the vacuum tube’s capacitance, with the -3 dB frequency calculated by the formula: \r\n\r\nNext, the algorithm applies a high pass filter to simulate the high pass filter created by Rk and Ck (see figure below), with the -3 dB frequency calculated by the formula:\r\n\r\nIt then amplifies the signal slightly, soft clips the signal on one side of the waveform, and flips the signal upside down to simulate how a vacuum tube amplifies and clips a signal. The soft clip transfer function is represented by:\r\n\r\nfor signals greater than the  desired clipping threshold, where x is the input signal and y is the desired clipping threshold between 0 and 1. Parts of the signal that are still greater than 1 after applying this function are set to equal 1.\r\nThe algorithm then centers the waveform by filtering out the DC offset in order to simulate how Co filters out DC offset. The values of Co and Rl are simulated as being large enough to not form a high pass filter with respect to audio frequencies, thus having no effect on our algorithm.\r\n\r\n##### *Overall Structure*\r\nOur simulated guitar vacuum tube preamp has 3 individual tube gain stages in order to emulate the cascading gain stage designs of many modern guitar vacuum tube preamps. Using more than one clipping stage results in duty cycle modulation, which is a shifting of the average DC offset of the waveform based on the input signal strength. This generates mostly odd-order harmonics with some even-order harmonics which increase as input signal gain increases.\r\n\r\nThe Graphical User Interface (GUI) for our algorithm is based on those of VST plug-ins for Audacity as mentioned in the previous section. Each gain stage has an individual gain knob (see Figure 3), and there are treble, mid, and bass knobs in the EQ section to simulate the tone stack, which is the equivalent of a passive EQ section in a guitar amplifier. The simulated tone stacks are based off of those given by the stock values in the Duncan Tone Stack Calculator, downloadable at the following web page: http://www.duncanamps.com/tsc/\r\n\r\nThere are 3 different EQ voicings available, which shift the frequency responses of the filters in the EQ section. If the Fender voicing is chosen, the tone stack is moved in between stages 1 and 2, while if the Vox or Marshall voicings are chosen, the tone stack is moved to immediately after stage 3. There are also 8 presets that simulate the frequency responses of different types of speakers available from Jensen Loudspeakers, specifically: the Mod 6-15, the P8R, the C8R, the P10R, the C10R, the Blackbird 12, the P12N, and the C12N. At the very end of the signal chain, we scale the signal so that the maximum of the absolute value of the signal vector is 1, then multiply the signal by a value between 0 and 1 that is determined by where the output volume control is set in the GUI.\r\n\r\nOverall, the signal chain is ordered as such: Gain stage 1 => (Tone stack if Fender preset chosen) => Gain stage 2 => Gain stage 3 => (Tone stack if Vox or Marshall preset chosen) => Set of filters to emulate speaker => Output volume scaling.\r\n\r\n![gui](https://raw.githubusercontent.com/ArthurMa/EECS352/master/gui.png)\r\n\r\n### Results\r\n\r\nTo test the accuracy of our entire system, we used Jensen Loudspeakers’ sound sample files collection, located at: http://www.jensentone.com/sound_sample_files. The collection contains the same electric guitar passage played through a vacuum tube amplifier set clean and then overdriven, all through a variety of different speakers. This allows us to process the clean version of the passage through our algorithm and compare the output to the overdriven version., which we treated as our ground truth. \r\n\r\nFor testing purposes, we decided to use Mel Frequency Cepstral Coefficients (MFCC) to measure the difference between our processed sound sample and the overdriven sample. To do this, we used the Rastamat package for Matlab provided at http://labrosa.ee.columbia.edu/matlab/rastamat/ to generate MFCC plots of our processed sample and the overdriven sample; then, since the plots can be represented as matrices, we subtracted one plot from the other and took the absolute value of the result. To minimize the resulting value, we used the patternsearch function in Matlab, a type of hill-climbing algorithm. Given the range of values each setting can achieve in our GUI as a constraint, the minimum value for our algorithm was approximately 116,000; however, when these constraints were lifted, the global minimum became approximately 75,000. For comparison's sake, we repeated this process for a version of the clean sample processed through the Nick Crow Lab: Tube Driver VST mentioned in section 2 and received a value of approximately 100,000, given the settings the VST can achieve as a constraint. Thus, our algorithm achieves comparable performance to existing VST algorithms and can outperform them if there are no constraints on the arguments passed to our algorithm; however, we did not allow our GUI to pass such arguments, because the values taken would have been impractical due to their sheer maginitude. \r\n\r\n### Conclusion\r\nThrough emulating individual gain stages, we were able to construct a simulated guitar vacuum tube preamp that achieves comparable performance to existing VST plug-ins for Audacity. However, one can fairly easily tell the difference between the output of our algorithm and that of an actual guitar vacuum tube amplifier through careful listening. As such, there are still optimizations that can be made to our algorithm to improve its performance. The ultimate goal of digital emulation of vacuum tube amplifiers is to produce a sonic result from a digital algorithm that an experienced musician would not be able to differentiate from an actual amplifier, and much like the rest of the digital guitar amplifier industry, we have yet to achieve this elusive goal.\r\n\r\n### Contact the Authors\r\n>\r\nTaylor Zheng  \r\nNorthwestern University\r\n1700 Hinman Ave\r\nEvanston, IL 60201\r\n1-614-439-0928\r\nTaylorZheng2015@u.northwestern.edu\r\n\r\n>\r\nJixiao Ma  \r\nNorthwestern University\r\n1930 Ridge Ave\r\nEvanston, IL 60201\r\n1-847-868-6510\r\njixiaoma2014@u.northwestern.edu\r\n\r\n>\r\nTae Hun Kim  \r\nNorthwestern University\r\n1637 Orrington Ave\r\nEvanston, IL 60201\r\n1-646-924-8407\r\ntaekim2013@u.northwestern.edu\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}